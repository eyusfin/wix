<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the Microsoft Reciprocal License. See LICENSE.TXT file in the project root for full license information. -->

<Project>
  <PropertyGroup>
    <SigningToolExe>$(ToolsFolder)\sign.exe</SigningToolExe>
    <SigningCommand>code azure-key-vault</SigningCommand>
    <SigningConfiguration>--description "WiX Toolset" --description-url "https://wixtoolset.org/" --timestamp-url "http://timestamp.digicert.com" --file-list "$(MSBuildThisFileDirectory)signing-empty-file-list.txt" --azure-key-vault-managed-identity true --azure-key-vault-url "$(SigningVaultUri)" --azure-key-vault-certificate "$(SigningCertName)"</SigningConfiguration>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsWixTestSupportProject)'=='true' ">
    <IsTestProject>false</IsTestProject>
  </PropertyGroup>

  <ItemGroup Condition=" '$(IsWixTestSupportProject)'=='true' ">
    <ProjectCapability Remove="TestContainer" />
  </ItemGroup>

  <!-- If the GitInfo package wasn't imported, use the calculated version properties. -->
  <Import Project="$(RootBuildFolder)wixver.props" Condition=" '$(GitInfoImported)'!='true' " />

  <Target Name="__FixupGitBaseVersion" BeforeTargets="_GitPopulateVersionInfo">
    <PropertyGroup>
      <GitBaseVersion>$(GitBaseVersion.Replace('{apiversion}', '$(ApiVersion)'))</GitBaseVersion>
      <GitBaseVersion>$(GitBaseVersion.Replace('{height}', '$(GitCommits)'))</GitBaseVersion>
      <GitBaseVersion>$(GitBaseVersion.Replace('{commits}', '$(GitCommits)'))</GitBaseVersion>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <GetPackageVersionDependsOn>
      $(GetPackageVersionDependsOn);
      __SetPropertiesFromGit;
    </GetPackageVersionDependsOn>

    <__SetPropertiesFromGitDependsOn Condition=" '$(GitInfoFromCache)'!='true' ">
      GitVersion
    </__SetPropertiesFromGitDependsOn>
  </PropertyGroup>

  <Target Name="__SetPropertiesFromGit" DependsOnTargets="$(__SetPropertiesFromGitDependsOn)">
    <PropertyGroup>
      <AssemblyVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).0.0</AssemblyVersion>
      <FileVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch).$(GitCommits)</FileVersion>
      <PackageVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)$(GitSemVerDashLabel)</PackageVersion>
      <MajorMinorVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor)</MajorMinorVersion>
      <Version>$(PackageVersion)</Version>
      <InformationalVersion>$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)$(GitSemVerDashLabel)+$(GitSha)</InformationalVersion>
      <!-- We already included the $(GitSha) in the informational version so do not include it again.  -->
      <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>

      <RepositoryUrl Condition=" '$(RepositoryUrl)'=='' and '$(GitRepositoryUrl)'!='' ">$(GitRepositoryUrl.Replace('.git',''))</RepositoryUrl>
      <RepositoryType Condition=" '$(RepositoryType)'=='' ">git</RepositoryType>
      <RepositoryCommit Condition=" '$(RepositoryCommit)'=='' ">$(GitSha)</RepositoryCommit>
      <PublishRepositoryUrl>true</PublishRepositoryUrl>

      <ProjectUrl Condition=" '$(ProjectUrl)'=='' and '$(RepositoryUrl)'!='' ">$(RepositoryUrl)</ProjectUrl>

      <WixMajorVersion>$(GitBaseVersionMajor)</WixMajorVersion>
      <WixMinorVersion>$(GitBaseVersionMinor)</WixMinorVersion>
      <WixPatchVersion>$(GitBaseVersionPatch)</WixPatchVersion>
    </PropertyGroup>

    <Message Importance="$(GitInfoReportImportance)" Text="Properties from Git:
  GitCommits: $(GitCommits)
  AssemblyVersion: $(AssemblyVersion)
  FileVersion: $(FileVersion)
  InformationalVersion: $(InformationalVersion)
  PackageVersion: $(PackageVersion)
" />
  </Target>

  <PropertyGroup>
    <GenerateNuspecDependsOn>
      $(GenerateNuspecDependsOn);
      __SetPropertiesFromGit;
      __SetNuspecProperties
    </GenerateNuspecDependsOn>
  </PropertyGroup>

  <Target Name="__SetNuspecProperties" DependsOnTargets="__SetPropertiesFromGit"
          Condition=" Exists('$(MSBuildProjectName).nuspec') ">
    <PropertyGroup>
      <NuspecFile Condition=" '$(NuspecFile)'=='' ">$(MSBuildProjectName).nuspec</NuspecFile>
      <PackageId Condition=" '$(PackageId)'=='' ">$(MSBuildProjectName)</PackageId>
      <Title Condition=" '$(Title)'=='' ">$(Description)</Title>
      <NuspecBasePath Condition=" '$(NuspecBasePath)'=='' ">$(OutputPath)</NuspecBasePath>
      <NuspecProperties>$(NuspecProperties);Id=$(PackageId);Version=$(PackageVersion);Authors=$(Authors);Configuration=$(Configuration)</NuspecProperties>
      <NuspecProperties>$(NuspecProperties);Copyright=$(Copyright);Description=$(Description);Title=$(Title)</NuspecProperties>
      <NuspecProperties>$(NuspecProperties);RepositoryType=$(RepositoryType);RepositoryCommit=$(RepositoryCommit);RepositoryUrl=$(RepositoryUrl)</NuspecProperties>
      <NuspecProperties>$(NuspecProperties);ProjectUrl=$(ProjectUrl);ProjectFolder=$(MSBuildProjectDirectory)</NuspecProperties>
    </PropertyGroup>

    <Message Importance="$(GitInfoReportImportance)" Text="NuSpec info:
  NuspecFile: $(NuspecFile)
  NuspecBasePath: $(NuspecBasePath)
  NuspecProperties: $(NuspecProperties)
" />

  </Target>

  <Target Name="PackNative" DependsOnTargets="__SetNuspecProperties"
          Condition=" Exists('$(MSBuildProjectName).nuspec') ">
    <Error Text="There must be package reference to 'GitInfo'. Ensure the project was restored as well."
           Condition=" '$(GitInfoImported)'!='true' " />

    <Exec Command='nuget pack $(NuspecFile) -OutputDirectory "$(PackageOutputPath.Trim(&quot;\&quot;))" -BasePath $(NuspecBasePath) -Properties "$(NuspecProperties)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" />

    <ItemGroup>
      <NuGetPackOutput Include="$(PackageOutputPath)\$(PackageId).$(PackageVersion).nupkg" />
    </ItemGroup>
  </Target>

  <Target Name="SignOutput" AfterTargets="AfterBuild"
          Condition=" '$(SigningCertName)'!='' and '$(SignOutput)'!='false' and
                      ('$(MSBuildProjectExtension)'=='.csproj' or ('$(MSBuildProjectExtension)'=='.vcxproj' and '$(ConfigurationType)'!='StaticLibrary'))">

    <Message Importance="high" Text="Signing file: $(TargetPath)" />

    <Exec Command='"$(SigningToolExe)" $(SigningCommand) $(SigningConfiguration) $(TargetPath)'
          WorkingDirectory="$(MSBuildProjectDirectory)" EchoOff="true" />
  </Target>

  <Target Name="SignNupkg" AfterTargets="Pack;PackNative"
          Condition=" '$(SigningCertName)'!='' and '@(NuGetPackOutput)'!='' and '$(SignNupkg)'!='false' ">
    <ItemGroup>
      <SigningNupkgs Include="@(NuGetPackOutput)" Condition=" '%(Extension)'=='.nupkg' " />
    </ItemGroup>

    <Message Importance="high" Text="Signing nupkg: @(SigningNupkgs->&apos;%(Identity)&apos;)" />

    <Exec Command='"$(SigningToolExe)" $(SigningCommand) $(SigningConfiguration) "@(SigningNupkgs->&apos;%(Identity)&apos;)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" EchoOff="true" />
  </Target>

  <Target Name="SignBundleEngine" Condition=" '$(SigningCertName)'!='' and '$(SignOutput)'!='false' ">
    <Message Importance="high" Text="Signing bundle engine: @(SignBundleEngine->&apos;%(Identity)&apos;)" />

    <Exec Command='"$(SigningToolExe)" $(SigningCommand) $(SigningConfiguration) "@(SignBundleEngine->&apos;%(Identity)&apos;)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" EchoOff="true" />
  </Target>

  <Target Name="SignBundle" Condition=" '$(SigningCertName)'!='' and '$(SignOutput)'!='false' ">
    <Message Importance="high" Text="Signing bundle: @(SignBundle->&apos;%(Identity)&apos;)" />

    <Exec Command='"$(SigningToolExe)" $(SigningCommand) $(SigningConfiguration) "@(SignBundle->&apos;%(Identity)&apos;)"'
          WorkingDirectory="$(MSBuildProjectDirectory)" EchoOff="true" />
  </Target>

  <Import Project="Directory$(MSBuildProjectExtension).targets" Condition=" Exists('Directory$(MSBuildProjectExtension).targets') " />
  <Import Project="Custom.Build.targets" Condition=" Exists('Custom.Build.targets') " />
</Project>
